"use client";

import React, { useState, useCallback } from 'react';
import dynamic from 'next/dynamic';
import { puckConfig } from '@/components/ui/simple-rich-editor';

// Dynamic import to prevent SSR issues
const Puck = dynamic(() => import('@measured/puck').then(mod => ({ default: mod.Puck })), {
  ssr: false,
  loading: () => <div className="flex items-center justify-center h-96 text-gray-500">Loading Puck Editor...</div>
});

// Import types separately
import type { Data } from '@measured/puck';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import toast from 'react-hot-toast';
import {
  Save,
  Eye,
  FileText,
  CheckCircle,
  Loader2,
  Code
} from 'lucide-react';

// Page configurations with direct file paths
const PAGE_CONFIGS = {
  'om-oss': {
    title: 'Om oss',
    filePath: 'app/om-oss/page.tsx',
    description: 'Sidan som presenterar vår trafikskola och våra tjänster'
  },
  'vara-tjanster': {
    title: 'Våra Tjänster',
    filePath: 'app/vara-tjanster/page.tsx',
    description: 'Sidan med detaljerad information om våra tjänster och priser'
  },
  'lokalerna': {
    title: 'Våra Lokaler',
    filePath: 'app/lokalerna/page.tsx',
    description: 'Sidan som visar våra lokaler och faciliteter'
  }
};

// TSX generation function
function generateTSXFromPuckData(data: Data, pageTitle: string): string {
  const imports = new Set(['React']);

  const renderComponent = (item: any): string => {
    const componentConfig = puckConfig.components[item.type as keyof typeof puckConfig.components];
    if (!componentConfig) return '';

    // Handle specific component types with proper TSX generation
    switch (item.type) {
      case "Heading":
        return `<h${item.props.level || 2}>${item.props.children || ""}</h${item.props.level || 2}>`;
      case "Paragraph":
        return `<p>${item.props.children || ""}</p>`;
      case "Text":
        let text = item.props.children || "";
        if (item.props.bold) text = `<strong>${text}</strong>`;
        if (item.props.italic) text = `<em>${text}</em>`;
        return `<span>${text}</span>`;
      case "List":
        const items = (item.props.items || []).map((listItem: any) => `<li>${listItem.content || ""}</li>`).join("");
        const ListTag = item.props.ordered ? "ol" : "ul";
        return `<${ListTag}>${items}</${ListTag}>`;
      case "Link":
        return `<a href="${item.props.href || ""}" target="${item.props.target || "_self"}">${item.props.children || ""}</a>`;
      case "Image":
        return `<img src="${item.props.src || ""}" alt="${item.props.alt || ""}" width="${item.props.width || "auto"}" height="${item.props.height || "auto"}" />`;
      case "Hero":
        return `<section class="${item.props.backgroundColor || "bg-blue-600"} text-white py-20"><div class="container mx-auto px-4 text-center"><h1 class="text-4xl font-bold mb-4">${item.props.title || ""}</h1><p class="text-xl">${item.props.subtitle || ""}</p></div></section>`;
      case "Button":
        return `<a href="${item.props.href || ""}" class="inline-block px-6 py-3 rounded-lg font-semibold ${item.props.variant === "primary" ? "bg-blue-600 text-white hover:bg-blue-700" : "bg-gray-200 text-gray-800 hover:bg-gray-300"} transition-colors">${item.props.text || ""}</a>`;
      case "Spacer":
        return `<div style="height: ${item.props.height || 40}px"></div>`;
      default:
        // Fallback for unknown components
        const props = Object.entries(item.props || {})
          .map(([key, value]) => {
            if (typeof value === 'string') {
              return `${key}="${value.replace(/"/g, '\\"')}"`;
            }
            return `${key}={${JSON.stringify(value)}}`;
          })
          .join(' ');
        return `<${item.type} ${props} />`;
    }
  };

  const content = data.content
    .map(renderComponent)
    .join('\n      ');

  return `import React from 'react';

// ${pageTitle} - Generated by Puck Editor
export default function Page() {
  return (
    <div className="min-h-screen">
      ${content}
    </div>
  );
}`;
}

// File reading and writing utilities
async function readPageFile(filePath: string): Promise<string> {
  try {
    const response = await fetch(`/api/admin/sideditor/read-file?path=${encodeURIComponent(filePath)}`);
    if (!response.ok) throw new Error('Failed to read file');
    return await response.text();
  } catch (error) {
    console.error('Error reading file:', error);
    throw error;
  }
}

async function writePageFile(filePath: string, content: string): Promise<void> {
  try {
    const response = await fetch('/api/admin/sideditor/write-file', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ path: filePath, content }),
    });
    if (!response.ok) throw new Error('Failed to write file');
  } catch (error) {
    console.error('Error writing file:', error);
    throw error;
  }
}

export default function SideditorClient() {
  const [selectedPage, setSelectedPage] = useState<string>('');
  const [pageData, setPageData] = useState<Data>({ content: [], root: { props: {} }, zones: {} });
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  const [showPreview, setShowPreview] = useState(false);

  // Load page content and convert to Puck format
  const loadPageContent = useCallback(async (pageId: string) => {
    setLoading(true);
    try {
      const config = PAGE_CONFIGS[pageId as keyof typeof PAGE_CONFIGS];
      if (!config) throw new Error('Invalid page configuration');

      const fileContent = await readPageFile(config.filePath);

      // Simple TSX to Puck conversion - extract basic content
      const data: Data = {
        content: [],
        root: { props: {} },
        zones: {}
      };

      // Enhanced content extraction from TSX
      const extractTextContent = (content: string) => {
        // Extract h1-h6 headings
        const headingMatches = content.match(/<h([1-6])[^>]*>(.*?)<\/h[1-6]>/gi);
        if (headingMatches) {
          headingMatches.forEach(match => {
            const levelMatch = match.match(/<h([1-6])/);
            const textMatch = match.match(/>(.*?)</);
            if (levelMatch && textMatch) {
              data.content.push({
                type: 'Heading',
                props: {
                  children: textMatch[1].replace(/<[^>]*>/g, ''),
                  level: levelMatch[1],
                  style: 'default'
                }
              });
            }
          });
        }

        // Extract paragraphs
        const paragraphMatches = content.match(/<p[^>]*>(.*?)<\/p>/gi);
        if (paragraphMatches) {
          paragraphMatches.forEach(match => {
            const textMatch = match.match(/>(.*?)</);
            if (textMatch && textMatch[1].trim()) {
              data.content.push({
                type: 'Paragraph',
                props: {
                  children: textMatch[1].replace(/<[^>]*>/g, ''),
                  align: 'left'
                }
              });
            }
          });
        }

        // Extract images
        const imageMatches = content.match(/<img[^>]*>/gi);
        if (imageMatches) {
          imageMatches.forEach(match => {
            const srcMatch = match.match(/src="([^"]*)"/);
            const altMatch = match.match(/alt="([^"]*)"/);
            if (srcMatch) {
              data.content.push({
                type: 'Image',
                props: {
                  src: srcMatch[1],
                  alt: altMatch ? altMatch[1] : '',
                  width: 'auto',
                  height: 'auto'
                }
              });
            }
          });
        }

        // Extract sections/divs with classes
        const sectionMatches = content.match(/<section[^>]*class="([^"]*)"[^>]*>(.*?)<\/section>/gi);
        if (sectionMatches) {
          sectionMatches.forEach(match => {
            const classMatch = match.match(/class="([^"]*)"/);
            if (classMatch && classMatch[1].includes('bg-')) {
              const bgClass = classMatch[1].match(/bg-[\w-]+/)?.[0] || 'bg-white';
              const paddingClass = classMatch[1].match(/py-[\w-]+/)?.[0] || 'py-16';
              const textClass = classMatch[1].match(/text-[\w-]+/)?.[0] || 'text-gray-900';
              
              data.content.push({
                type: 'Section',
                props: {
                  backgroundColor: bgClass,
                  padding: paddingClass,
                  textColor: textClass
                }
              });
            }
          });
        }
      };

      extractTextContent(fileContent);

      // If no content was extracted, add default content
      if (data.content.length === 0) {
        data.content = [
          {
            type: 'Hero',
            props: {
              title: `Welcome to ${config.title}`,
              subtitle: 'Start editing by dragging components from the sidebar',
              backgroundColor: 'bg-blue-600'
            }
          },
          {
            type: 'Section',
            props: {
              backgroundColor: 'bg-white',
              padding: 'py-16',
              textColor: 'text-gray-900'
            }
          },
          {
            type: 'Grid',
            props: {
              columns: '3',
              gap: 'gap-6'
            }
          }
        ];
      }

      setPageData(data);
      setHasUnsavedChanges(false);
      toast.success(`Sidan "${config.title}" laddad för redigering`);
    } catch (error) {
      console.error('Error loading page:', error);
      toast.error('Kunde inte ladda sidinnehåll');
    } finally {
      setLoading(false);
    }
  }, []);

  // Save page content as TSX file
  const savePageContent = useCallback(async () => {
    if (!selectedPage) {
      toast.error('Välj en sida att spara');
      return;
    }

    setSaving(true);
    try {
      const config = PAGE_CONFIGS[selectedPage as keyof typeof PAGE_CONFIGS];
      if (!config) throw new Error('Invalid page configuration');

      const tsxContent = generateTSXFromPuckData(pageData, config.title);

      await writePageFile(config.filePath, tsxContent);

      setHasUnsavedChanges(false);
      toast.success(`Sidan "${config.title}" sparad som TSX-fil`);
    } catch (error) {
      console.error('Error saving page:', error);
      toast.error('Kunde inte spara sidan');
    } finally {
      setSaving(false);
    }
  }, [selectedPage, pageData]);

  // Handle page selection
  const handlePageSelect = (pageId: string) => {
    if (hasUnsavedChanges) {
      if (!confirm('Du har osparade ändringar. Vill du fortsätta utan att spara?')) {
        return;
      }
    }
    setSelectedPage(pageId);
    loadPageContent(pageId);
  };

  // Handle Puck editor changes
  const handleEditorChange = (data: Data) => {
    setPageData(data);
    setHasUnsavedChanges(true);
  };

  // Handle save
  const handleSave = () => {
    savePageContent();
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900">
      <div className="w-full px-4 py-6 space-y-6">
        {/* Header Section */}
        <div className="text-center mb-12">
          <div className="inline-flex items-center gap-4 mb-6">
            <div className="p-4 rounded-2xl bg-gradient-to-br from-indigo-500 to-purple-600 shadow-xl border border-indigo-300">
              <Code className="w-10 h-10 text-white" />
            </div>
            <h1 className="text-4xl md:text-6xl font-bold bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent tracking-tight">
              Puck Page Editor
            </h1>
          </div>
          <p className="text-xl md:text-2xl text-gray-600 font-medium leading-relaxed max-w-3xl mx-auto">
            Direct TSX/JSX editing with visual drag & drop components
          </p>
        </div>

        {/* Page Selection */}
        <Card className="shadow-2xl border-0 bg-white/90 dark:bg-slate-800/90 backdrop-blur-md rounded-2xl">
          <CardHeader className="pb-4">
            <CardTitle className="flex items-center gap-3 text-xl font-semibold text-slate-800 dark:text-slate-100">
              <FileText className="w-6 h-6 text-blue-600" />
              Select Page to Edit
            </CardTitle>
            <CardDescription className="text-base text-slate-600 dark:text-slate-300">
              Choose which page you want to edit with direct TSX/JSX file generation
            </CardDescription>
          </CardHeader>
          <CardContent className="pt-0">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {Object.entries(PAGE_CONFIGS).map(([pageId, config]) => (
                <Card
                  key={pageId}
                  className={`cursor-pointer transition-all duration-300 hover:shadow-xl hover:scale-105 border-2 rounded-2xl transform ${
                    selectedPage === pageId
                      ? 'ring-4 ring-blue-400/50 border-blue-500 bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-950/50 dark:to-blue-900/50 shadow-2xl'
                      : 'border-slate-200 dark:border-slate-700 hover:border-blue-300 dark:hover:border-blue-600 bg-white dark:bg-slate-800 hover:shadow-xl'
                  }`}
                  onClick={() => handlePageSelect(pageId)}
                >
                  <CardContent className="p-6">
                    <div className="flex items-start justify-between mb-3">
                      <div className="flex-1">
                        <h3 className="font-bold text-lg text-slate-800 dark:text-slate-100 mb-1">
                          {config.title}
                        </h3>
                        <p className="text-sm text-slate-600 dark:text-slate-400 leading-relaxed">
                          {config.description}
                        </p>
                        <p className="text-xs text-slate-500 dark:text-slate-500 mt-2">
                          📁 {config.filePath}
                        </p>
                      </div>
                      {selectedPage === pageId && (
                        <CheckCircle className="w-6 h-6 text-blue-600 flex-shrink-0 ml-3" />
                      )}
                    </div>
                    <div className="mt-4 pt-4 border-t border-slate-200 dark:border-slate-700">
                      <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-slate-100 dark:bg-slate-700 text-slate-700 dark:text-slate-300">
                        📄 TSX File Editing
                      </span>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Puck Editor */}
        {selectedPage && (
          <Card className="shadow-2xl border-0 bg-white/90 dark:bg-slate-800/90 backdrop-blur-md rounded-2xl">
            <CardHeader className="pb-4 border-b border-slate-200 dark:border-slate-700">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  <div className="p-2 bg-blue-100 dark:bg-blue-900/50 rounded-lg">
                    <Code className="w-6 h-6 text-blue-600" />
                  </div>
                  <div>
                    <CardTitle className="text-2xl font-bold text-slate-800 dark:text-slate-100">
                      Edit: {PAGE_CONFIGS[selectedPage as keyof typeof PAGE_CONFIGS]?.title}
                    </CardTitle>
                    <CardDescription className="text-base text-slate-600 dark:text-slate-300 mt-1">
                      Visual component editing with direct TSX/JSX file generation
                    </CardDescription>
                  </div>
                </div>
                <div className="flex items-center gap-3">
                  {hasUnsavedChanges && (
                    <div className="flex items-center gap-2 px-3 py-2 bg-yellow-100 dark:bg-yellow-900/30 rounded-lg border border-yellow-300 dark:border-yellow-700">
                      <div className="w-2 h-2 bg-yellow-500 rounded-full animate-pulse"></div>
                      <span className="text-sm font-medium text-yellow-800 dark:text-yellow-200">
                        Unsaved Changes
                      </span>
                    </div>
                  )}
                  <Button
                    onClick={() => setShowPreview(!showPreview)}
                    variant="outline"
                    size="lg"
                    className="border-slate-300 dark:border-slate-600 hover:bg-slate-50 dark:hover:bg-slate-700"
                  >
                    <Eye className="w-5 h-5 mr-2" />
                    {showPreview ? 'Hide Preview' : 'Show Preview'}
                  </Button>
                  <Button
                    onClick={handleSave}
                    disabled={saving || !hasUnsavedChanges}
                    size="lg"
                    className={`font-semibold transition-all duration-200 ${
                      hasUnsavedChanges
                        ? 'bg-green-600 hover:bg-green-700 text-white shadow-lg hover:shadow-xl'
                        : 'bg-slate-400 dark:bg-slate-600 text-slate-200 cursor-not-allowed'
                    }`}
                  >
                    {saving ? (
                      <>
                        <Loader2 className="w-5 h-5 mr-2 animate-spin" />
                        Saving...
                      </>
                    ) : (
                      <>
                        <Save className="w-5 h-5 mr-2" />
                        Save as TSX
                      </>
                    )}
                  </Button>
                </div>
              </div>
            </CardHeader>
            <CardContent className="pt-6">
              {loading ? (
                <div className="flex flex-col items-center justify-center h-96 bg-slate-50 dark:bg-slate-900/50 rounded-lg border-2 border-dashed border-slate-300 dark:border-slate-600">
                  <div className="flex items-center gap-3">
                    <Loader2 className="w-8 h-8 animate-spin text-blue-600" />
                    <span className="text-lg font-medium text-slate-700 dark:text-slate-300">
                      Loading Puck Editor...
                    </span>
                  </div>
                  <p className="text-sm text-slate-500 dark:text-slate-400 mt-2">
                    Preparing visual component editor
                  </p>
                </div>
              ) : (
                <div className="space-y-6">
                  {/* Puck Editor */}
                  <div className="border-2 border-slate-200 dark:border-slate-700 rounded-2xl overflow-hidden shadow-2xl bg-white" style={{ height: '80vh' }}>
                    <Puck
                      config={puckConfig}
                      data={pageData}
                      onChange={handleEditorChange}
                      headerTitle={`Editing: ${PAGE_CONFIGS[selectedPage as keyof typeof PAGE_CONFIGS]?.title}`}
                      headerPath="/"
                      iframe={{
                        enabled: false
                      }}
                    />
                  </div>

                  {/* Preview Mode */}
                  {showPreview && (
                    <div className="border-2 border-slate-200 dark:border-slate-700 rounded-2xl overflow-hidden shadow-2xl">
                      <div className="bg-gradient-to-r from-gray-100 to-gray-200 dark:from-gray-800 dark:to-gray-700 px-6 py-4 border-b border-slate-200 dark:border-slate-600">
                        <h3 className="font-bold text-gray-800 dark:text-gray-200 text-lg">Live Preview</h3>
                      </div>
                      <div className="p-6 bg-white dark:bg-gray-900 min-h-[400px]">
                        {pageData.content.map((block, index) => {
                          const Component = puckConfig.components[block.type as keyof typeof puckConfig.components];
                          if (!Component?.render) return null;

                          return (
                            <div key={index} className="mb-4">
                              {Component.render(block.props)}
                            </div>
                          );
                        })}
                      </div>
                    </div>
                  )}
                </div>
              )}
            </CardContent>
          </Card>
        )}

        {/* Footer */}
        <div className="text-center py-8">
          <div className="inline-flex items-center gap-2 px-6 py-3 bg-white/60 dark:bg-slate-800/60 rounded-full backdrop-blur-sm border border-slate-200 dark:border-slate-700">
            <span className="text-sm font-medium text-slate-700 dark:text-slate-300">
              🎯 Direct TSX/JSX file editing with visual components
            </span>
          </div>
        </div>
      </div>
    </div>
  );
}
