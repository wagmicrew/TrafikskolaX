#!/usr/bin/env node

/**
 * Complete Environment Setup for TrafikskolaX
 *
 * This script helps you set up all necessary environment variables
 * for local development and testing.
 */

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function ask(question, defaultValue = '') {
  return new Promise((resolve) => {
    const prompt = defaultValue ? `${question} [${defaultValue}]: ` : `${question}: `;
    rl.question(prompt, (answer) => {
      resolve(answer.trim() || defaultValue);
    });
  });
}

function generateSecret(length = 32) {
  return crypto.randomBytes(length).toString('base64').slice(0, length);
}

function generateHexSecret(length = 32) {
  return crypto.randomBytes(length).toString('hex');
}

function createEnvFile(answers) {
  const envContent = `# =================================================================
# TRAFIKSKOLAX ENVIRONMENT CONFIGURATION
# =================================================================
# Generated by setup-environment.js on ${new Date().toISOString()}
# DO NOT commit this file to version control!

# =================================================================
# REQUIRED: Database Configuration
# =================================================================
DATABASE_URL="${answers.databaseUrl}"

# =================================================================
# REQUIRED: JWT Authentication
# =================================================================
JWT_SECRET="${answers.jwtSecret}"

# =================================================================
# REQUIRED: Application URLs
# =================================================================
NEXT_PUBLIC_APP_URL="${answers.appUrl}"

# =================================================================
# REQUIRED: Encryption Keys
# =================================================================
ENCRYPTION_KEY="${answers.encryptionKey}"
PERSONAL_ID_ENCRYPTION_KEY="${answers.personalIdEncryptionKey}"

# =================================================================
# PAYMENT SYSTEM CONFIGURATION
# =================================================================

# Swish Payment Configuration
NEXT_PUBLIC_SWISH_NUMBER="${answers.swishNumber}"

# Qliro Payment Configuration
QLIRO_MERCHANT_ID="${answers.qliroMerchantId}"
QLIRO_API_KEY="${answers.qliroApiKey}"
NEXT_PUBLIC_QLIRO_MERCHANT_ID="${answers.qliroMerchantId}"

# Teori Payment Configuration
TEORI_API_KEY="${answers.teoriApiKey}"
TEORI_API_SECRET="${answers.teoriApiSecret}"
TEORI_MERCHANT_ID="${answers.teoriMerchantId}"
TEORI_SHARED_SECRET="${answers.teoriSharedSecret}"

# =================================================================
# EMAIL CONFIGURATION
# =================================================================

# SendGrid Email Service
SENDGRID_API_KEY="${answers.sendgridApiKey}"

# Admin Email for Notifications
ADMIN_EMAIL="${answers.adminEmail}"

# =================================================================
# OPTIONAL: Development & Testing
# =================================================================

# Environment Mode
NODE_ENV="development"

# Cron Job Secret (for automated tasks)
CRON_SECRET_TOKEN="${answers.cronSecret}"

# Test Email for Development
TEST_TEACHER_EMAIL="${answers.testTeacherEmail}"

# =================================================================
# SETUP COMPLETE
# =================================================================
# Your environment is configured for local development.
# Test with: node scripts/test-database-connection.js
# Start app with: npm run dev
`;

  return envContent;
}

async function setupEnvironment() {
  console.log('üöÄ TRAFIKSKOLAX ENVIRONMENT SETUP');
  console.log('=================================\n');

  console.log('This script will help you configure all necessary environment variables.\n');
  console.log('‚ö†Ô∏è  You can press Enter to use default values for optional settings.\n');

  // Check if .env.local already exists
  const envPath = path.join(process.cwd(), '.env.local');
  if (fs.existsSync(envPath)) {
    console.log('üìã Found existing .env.local file');
    const overwrite = await ask('Do you want to overwrite it? (y/N)', 'n');
    if (overwrite.toLowerCase() !== 'y') {
      console.log('‚úÖ Keeping existing configuration');
      rl.close();
      return;
    }
  }

  console.log('üîß Setting up environment variables...\n');

  // Required variables
  console.log('üìã REQUIRED SETTINGS:');
  console.log('===================');

  const databaseUrl = await ask('DATABASE_URL (from Neon Console)', '');
  if (!databaseUrl) {
    console.log('‚ùå DATABASE_URL is required!');
    process.exit(1);
  }

  const jwtSecret = await ask('JWT_SECRET (leave empty for auto-generate)', '');
  const finalJwtSecret = jwtSecret || generateSecret(32);

  const appUrl = await ask('NEXT_PUBLIC_APP_URL', 'http://localhost:3000');

  const encryptionKey = await ask('ENCRYPTION_KEY (leave empty for auto-generate)', '');
  const finalEncryptionKey = encryptionKey || generateSecret(32);

  const personalIdEncryptionKey = await ask('PERSONAL_ID_ENCRYPTION_KEY (leave empty for auto-generate)', '');
  const finalPersonalIdEncryptionKey = personalIdEncryptionKey || generateSecret(32);

  console.log('\nüí≥ PAYMENT SETTINGS (optional for development):');
  console.log('==============================================');

  const swishNumber = await ask('NEXT_PUBLIC_SWISH_NUMBER', '1234567890');
  const qliroMerchantId = await ask('QLIRO_MERCHANT_ID', 'test-merchant-id');
  const qliroApiKey = await ask('QLIRO_API_KEY', 'test-api-key');

  console.log('\nüéì TEORI PAYMENT SETTINGS (optional for development):');
  console.log('==================================================');

  const teoriApiKey = await ask('TEORI_API_KEY', 'test-teori-key');
  const teoriApiSecret = await ask('TEORI_API_SECRET', 'test-teori-secret');
  const teoriMerchantId = await ask('TEORI_MERCHANT_ID', 'test-teori-merchant');
  const teoriSharedSecret = await ask('TEORI_SHARED_SECRET', 'test-teori-shared');

  console.log('\nüìß EMAIL SETTINGS (optional for development):');
  console.log('===========================================');

  const sendgridApiKey = await ask('SENDGRID_API_KEY', 'test-sendgrid-key');
  const adminEmail = await ask('ADMIN_EMAIL', 'admin@example.com');

  console.log('\nüîß DEVELOPMENT SETTINGS:');
  console.log('======================');

  const cronSecret = await ask('CRON_SECRET_TOKEN (leave empty for auto-generate)', '');
  const finalCronSecret = cronSecret || generateSecret(16);

  const testTeacherEmail = await ask('TEST_TEACHER_EMAIL', 'teacher@example.com');

  // Collect all answers
  const answers = {
    databaseUrl,
    jwtSecret: finalJwtSecret,
    appUrl,
    encryptionKey: finalEncryptionKey,
    personalIdEncryptionKey: finalPersonalIdEncryptionKey,
    swishNumber,
    qliroMerchantId,
    qliroApiKey,
    teoriApiKey,
    teoriApiSecret,
    teoriMerchantId,
    teoriSharedSecret,
    sendgridApiKey,
    adminEmail,
    cronSecret: finalCronSecret,
    testTeacherEmail
  };

  // Create .env.local file
  console.log('\nüìù Creating .env.local file...');
  const envContent = createEnvFile(answers);

  try {
    fs.writeFileSync(envPath, envContent);
    console.log('‚úÖ Successfully created .env.local file!');
    console.log('üìÑ File location:', envPath);
    console.log('');

    // Display summary
    console.log('üìã CONFIGURATION SUMMARY:');
    console.log('========================');
    console.log(`‚úÖ Database URL: ${databaseUrl ? 'Set' : '‚ùå Not set'}`);
    console.log(`‚úÖ JWT Secret: ${finalJwtSecret.substring(0, 8)}...`);
    console.log(`‚úÖ App URL: ${appUrl}`);
    console.log(`‚úÖ Encryption Keys: Generated`);
    console.log(`‚úÖ Payment Settings: ${swishNumber !== '1234567890' ? 'Custom' : 'Default'}`);
    console.log(`‚úÖ Email Settings: ${sendgridApiKey !== 'test-sendgrid-key' ? 'Custom' : 'Default'}`);
    console.log('');

    console.log('üîç Testing database connection...');
    console.log('');

    // Test the connection
    const { spawn } = require('child_process');
    const testScript = spawn('node', ['scripts/test-database-connection.js'], {
      stdio: 'inherit',
      cwd: process.cwd()
    });

    testScript.on('close', (code) => {
      if (code === 0) {
        console.log('\nüéâ Environment setup completed successfully!');
        console.log('\nüöÄ You can now:');
        console.log('   ‚Ä¢ Start the app: npm run dev');
        console.log('   ‚Ä¢ Test database: node scripts/test-database-connection.js');
        console.log('   ‚Ä¢ Test Teori system: node scripts/test-unified-teori-system.js');
        console.log('   ‚Ä¢ Remove safe tables: node scripts/verify-table-removal.js');
      } else {
        console.log('\n‚ùå Database connection test failed.');
        console.log('\nüîß Check your DATABASE_URL and try again.');
        console.log('üí° You can still edit .env.local manually and test again.');
      }
      rl.close();
    });

  } catch (error) {
    console.log('‚ùå Failed to create .env.local file:', error.message);
    rl.close();
  }
}

// Handle command line arguments
if (process.argv.includes('--help') || process.argv.includes('-h')) {
  console.log(`
TrafikskolaX Environment Setup

Usage:
  node scripts/setup-environment.js

This interactive script will:
1. Ask for all required environment variables
2. Auto-generate secure secrets where appropriate
3. Create your .env.local file
4. Test the database connection
5. Guide you to the next steps

Required for setup:
  ‚Ä¢ DATABASE_URL (from Neon Console)
  ‚Ä¢ JWT_SECRET (will auto-generate if not provided)

Optional for development:
  ‚Ä¢ Payment API keys (use test values)
  ‚Ä¢ Email API keys (use test values)

The script will create a production-ready .env.local file.
  `);
  process.exit(0);
}

// Run setup
setupEnvironment().catch(console.error);
