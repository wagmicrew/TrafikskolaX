'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from '@/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useAuth } from '@/hooks/use-auth';
import { useRouter } from 'next/navigation';
import toast from 'react-hot-toast';
import {
  Plus,
  Edit,
  Trash2,
  Eye,
  Save,
  FileText,
  Menu,
  Settings,
  Image as ImageIcon,
  ArrowLeft
} from 'lucide-react';

interface Page {
  id: string;
  slug: string;
  title: string;
  content?: string;
  excerpt?: string;
  metaTitle?: string;
  metaDescription?: string;
  status: 'draft' | 'published' | 'archived';
  isStatic: boolean;
  staticPath?: string;
  createdAt: string;
  updatedAt: string;
}

interface MenuItem {
  id: string;
  parentId?: string;
  label: string;
  url?: string;
  pageId?: string;
  isExternal: boolean;
  icon?: string;
  sortOrder: number;
  isActive: boolean;
  isAdminMenu: boolean;
}

export default function CmsAdminPage() {
  const { user, isLoading: authLoading } = useAuth();
  const router = useRouter();

  const [pages, setPages] = useState<Page[]>([]);
  const [menuItems, setMenuItems] = useState<MenuItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('pages');

  // Page editing state
  const [editingPage, setEditingPage] = useState<Page | null>(null);
  const [pageForm, setPageForm] = useState({
    title: '',
    slug: '',
    content: '',
    excerpt: '',
    metaTitle: '',
    metaDescription: '',
    status: 'draft' as const
  });

  // Menu editing state
  const [editingMenuItem, setEditingMenuItem] = useState<MenuItem | null>(null);
  const [menuForm, setMenuForm] = useState({
    label: '',
    url: '',
    pageId: '',
    isExternal: false,
    icon: '',
    sortOrder: 0,
    isActive: true,
    isAdminMenu: false
  });

  const [showPageDialog, setShowPageDialog] = useState(false);
  const [showMenuDialog, setShowMenuDialog] = useState(false);

  // Authentication check
  useEffect(() => {
    if (!authLoading && (!user || user.role !== 'admin')) {
      router.push('/login');
    }
  }, [user, authLoading, router]);

  // Load data
  useEffect(() => {
    if (user && user.role === 'admin') {
      loadPages();
      loadMenuItems();
    }
  }, [user]);

  const loadPages = async () => {
    try {
      const response = await fetch('/api/admin/cms/pages');
      if (response.ok) {
        const data = await response.json();
        setPages(data.pages || []);
      } else {
        toast.error('Kunde inte ladda sidor');
      }
    } catch (error) {
      console.error('Error loading pages:', error);
      toast.error('Kunde inte ladda sidor');
    }
  };

  const loadMenuItems = async () => {
    try {
      const response = await fetch('/api/admin/cms/menu');
      if (response.ok) {
        const data = await response.json();
        setMenuItems(data.menuItems || []);
      } else {
        toast.error('Kunde inte ladda menyobjekt');
      }
    } catch (error) {
      console.error('Error loading menu items:', error);
      toast.error('Kunde inte ladda menyobjekt');
    } finally {
      setLoading(false);
    }
  };

  const handleSavePage = async () => {
    try {
      const method = editingPage ? 'PUT' : 'POST';
      const url = editingPage
        ? `/api/admin/cms/pages/${editingPage.id}`
        : '/api/admin/cms/pages';

      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(pageForm)
      });

      if (response.ok) {
        toast.success(editingPage ? 'Sidan uppdaterad' : 'Sidan skapad');
        setShowPageDialog(false);
        setEditingPage(null);
        resetPageForm();
        loadPages();
      } else {
        const errorData = await response.json();
        toast.error(errorData.error || 'Kunde inte spara sidan');
      }
    } catch (error) {
      console.error('Error saving page:', error);
      toast.error('Kunde inte spara sidan');
    }
  };

  const handleSaveMenuItem = async () => {
    try {
      const method = editingMenuItem ? 'PUT' : 'POST';
      const url = editingMenuItem
        ? `/api/admin/cms/menu/${editingMenuItem.id}`
        : '/api/admin/cms/menu';

      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(menuForm)
      });

      if (response.ok) {
        toast.success(editingMenuItem ? 'Menyobjekt uppdaterat' : 'Menyobjekt skapat');
        setShowMenuDialog(false);
        setEditingMenuItem(null);
        resetMenuForm();
        loadMenuItems();
      } else {
        const errorData = await response.json();
        toast.error(errorData.error || 'Kunde inte spara menyobjekt');
      }
    } catch (error) {
      console.error('Error saving menu item:', error);
      toast.error('Kunde inte spara menyobjekt');
    }
  };

  const handleDeletePage = async (pageId: string) => {
    if (!confirm('Är du säker på att du vill radera denna sida?')) return;

    try {
      const response = await fetch(`/api/admin/cms/pages/${pageId}`, {
        method: 'DELETE'
      });

      if (response.ok) {
        toast.success('Sidan raderad');
        loadPages();
      } else {
        toast.error('Kunde inte radera sidan');
      }
    } catch (error) {
      console.error('Error deleting page:', error);
      toast.error('Kunde inte radera sidan');
    }
  };

  const handleDeleteMenuItem = async (menuItemId: string) => {
    if (!confirm('Är du säker på att du vill radera detta menyobjekt?')) return;

    try {
      const response = await fetch(`/api/admin/cms/menu/${menuItemId}`, {
        method: 'DELETE'
      });

      if (response.ok) {
        toast.success('Menyobjekt raderat');
        loadMenuItems();
      } else {
        toast.error('Kunde inte radera menyobjekt');
      }
    } catch (error) {
      console.error('Error deleting menu item:', error);
      toast.error('Kunde inte radera menyobjekt');
    }
  };

  const resetPageForm = () => {
    setPageForm({
      title: '',
      slug: '',
      content: '',
      excerpt: '',
      metaTitle: '',
      metaDescription: '',
      status: 'draft'
    });
  };

  const resetMenuForm = () => {
    setMenuForm({
      label: '',
      url: '',
      pageId: '',
      isExternal: false,
      icon: '',
      sortOrder: 0,
      isActive: true,
      isAdminMenu: false
    });
  };

  const openEditPage = (page: Page) => {
    setEditingPage(page);
    setPageForm({
      title: page.title,
      slug: page.slug,
      content: page.content || '',
      excerpt: page.excerpt || '',
      metaTitle: page.metaTitle || '',
      metaDescription: page.metaDescription || '',
      status: page.status
    });
    setShowPageDialog(true);
  };

  const openEditMenuItem = (menuItem: MenuItem) => {
    setEditingMenuItem(menuItem);
    setMenuForm({
      label: menuItem.label,
      url: menuItem.url || '',
      pageId: menuItem.pageId || '',
      isExternal: menuItem.isExternal,
      icon: menuItem.icon || '',
      sortOrder: menuItem.sortOrder,
      isActive: menuItem.isActive,
      isAdminMenu: menuItem.isAdminMenu
    });
    setShowMenuDialog(true);
  };

  const generateSlug = (title: string) => {
    return title
      .toLowerCase()
      .replace(/[^\w\s-]/g, '')
      .replace(/[\s_-]+/g, '-')
      .replace(/^-+|-+$/g, '');
  };

  const handleTitleChange = (title: string) => {
    setPageForm(prev => ({
      ...prev,
      title,
      slug: generateSlug(title)
    }));
  };

  if (authLoading || !user) {
    return <div className="flex items-center justify-center min-h-screen">Laddar...</div>;
  }

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold">CMS - Innehållshantering</h1>
          <p className="text-gray-600">Hantera sidor och menyobjekt</p>
        </div>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="pages" className="flex items-center gap-2">
            <FileText className="w-4 h-4" />
            Sidredigerare
          </TabsTrigger>
          <TabsTrigger value="menu" className="flex items-center gap-2">
            <Menu className="w-4 h-4" />
            Menyredigerare
          </TabsTrigger>
        </TabsList>

        <TabsContent value="pages" className="space-y-6">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <div>
                <CardTitle>Sidor</CardTitle>
                <CardDescription>Skapa och redigera webbsidor</CardDescription>
              </div>
              <Button onClick={() => setShowPageDialog(true)} className="flex items-center gap-2">
                <Plus className="w-4 h-4" />
                Skapa ny sida
              </Button>
            </CardHeader>
            <CardContent>
              {loading ? (
                <div className="flex items-center justify-center py-8">
                  <div className="text-gray-500">Laddar sidor...</div>
                </div>
              ) : (
                <div className="space-y-4">
                  {pages.map((page) => (
                    <div key={page.id} className="border rounded-lg p-4 hover:shadow-md transition-shadow">
                      <div className="flex justify-between items-start">
                        <div className="space-y-2">
                          <div className="flex items-center gap-2">
                            <h3 className="font-semibold">{page.title}</h3>
                            <span className={`px-2 py-1 text-xs rounded-full ${
                              page.status === 'published'
                                ? 'bg-green-100 text-green-800'
                                : page.status === 'draft'
                                ? 'bg-yellow-100 text-yellow-800'
                                : 'bg-gray-100 text-gray-800'
                            }`}>
                              {page.status === 'published' ? 'Publicerad' : page.status === 'draft' ? 'Utkast' : 'Arkiverad'}
                            </span>
                          </div>
                          <p className="text-sm text-gray-600">Slug: /{page.slug}</p>
                          <p className="text-sm text-gray-500">
                            Uppdaterad: {new Date(page.updatedAt).toLocaleDateString('sv-SE')}
                          </p>
                        </div>

                        <div className="flex gap-2">
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => window.open(`/${page.slug}`, '_blank')}
                          >
                            <Eye className="w-4 h-4" />
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => openEditPage(page)}
                          >
                            <Edit className="w-4 h-4" />
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => handleDeletePage(page.id)}
                          >
                            <Trash2 className="w-4 h-4" />
                          </Button>
                        </div>
                      </div>
                    </div>
                  ))}

                  {pages.length === 0 && (
                    <div className="text-center py-8 text-gray-500">
                      Inga sidor hittades. Skapa din första sida!
                    </div>
                  )}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="menu" className="space-y-6">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <div>
                <CardTitle>Menyobjekt</CardTitle>
                <CardDescription>Skapa och ordna menyobjekt</CardDescription>
              </div>
              <Button onClick={() => setShowMenuDialog(true)} className="flex items-center gap-2">
                <Plus className="w-4 h-4" />
                Skapa menyobjekt
              </Button>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {menuItems
                  .filter(item => !item.isAdminMenu)
                  .sort((a, b) => a.sortOrder - b.sortOrder)
                  .map((item) => (
                  <div key={item.id} className="border rounded-lg p-4 hover:shadow-md transition-shadow">
                    <div className="flex justify-between items-center">
                      <div className="space-y-1">
                        <div className="flex items-center gap-2">
                          <h3 className="font-semibold">{item.label}</h3>
                          {!item.isActive && (
                            <span className="px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded-full">
                              Inaktiv
                            </span>
                          )}
                        </div>
                        <p className="text-sm text-gray-600">
                          {item.isExternal ? `Extern länk: ${item.url}` : item.pageId ? 'Länkad till sida' : `URL: ${item.url}`}
                        </p>
                        <p className="text-sm text-gray-500">Sortering: {item.sortOrder}</p>
                      </div>

                      <div className="flex gap-2">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => openEditMenuItem(item)}
                        >
                          <Edit className="w-4 h-4" />
                        </Button>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleDeleteMenuItem(item.id)}
                        >
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      </div>
                    </div>
                  </div>
                ))}

                {menuItems.filter(item => !item.isAdminMenu).length === 0 && (
                  <div className="text-center py-8 text-gray-500">
                    Inga menyobjekt hittades. Skapa ditt första menyobjekt!
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Page Editor Dialog */}
      <Dialog open={showPageDialog} onOpenChange={setShowPageDialog}>
        <DialogContent className="w-[95vw] max-w-[95vw] sm:w-[90vw] sm:max-w-[800px] md:max-w-[900px] lg:max-w-[1000px] max-h-[95vh] sm:max-h-[90vh] p-0 overflow-hidden border-0 bg-transparent shadow-none">
          {/* Glassmorphism Container */}
          <div className="relative bg-white/10 backdrop-blur-xl border border-white/20 rounded-xl sm:rounded-2xl shadow-2xl h-full max-h-[95vh] overflow-hidden">
            {/* Background gradient overlay */}
            <div className="absolute inset-0 bg-gradient-to-br from-red-500/20 via-transparent to-blue-500/20 rounded-xl sm:rounded-2xl"></div>

            {/* Scrollable Content Container */}
            <div className="relative z-10 h-full overflow-y-auto">
              <div className="p-4 sm:p-6 md:p-8">
                <DialogHeader className="relative mb-4 sm:mb-6">
                  <div className="flex items-center justify-between">
                    <DialogTitle className="text-xl sm:text-2xl md:text-3xl font-bold text-white drop-shadow-lg pr-2">
                      {editingPage ? 'Redigera sida' : 'Skapa ny sida'}
                    </DialogTitle>
                  </div>
                  <div className="h-px bg-gradient-to-r from-transparent via-white/30 to-transparent mt-3 sm:mt-4"></div>
                </DialogHeader>

                <div className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="page-title" className="text-white font-medium drop-shadow-sm text-sm sm:text-base">
                        Titel *
                      </Label>
                      <Input
                        id="page-title"
                        value={pageForm.title}
                        onChange={(e) => handleTitleChange(e.target.value)}
                        placeholder="Sidan titel"
                        className="bg-white/10 backdrop-blur-sm border border-white/30 text-white placeholder:text-white/60 focus:bg-white/20 focus:border-white/50 transition-all duration-200 rounded-lg sm:rounded-xl h-10 sm:h-12 text-sm sm:text-base"
                      />
                    </div>

                    <div>
                      <Label htmlFor="page-slug" className="text-white font-medium drop-shadow-sm text-sm sm:text-base">
                        Slug (URL) *
                      </Label>
                      <Input
                        id="page-slug"
                        value={pageForm.slug}
                        onChange={(e) => setPageForm(prev => ({ ...prev, slug: e.target.value }))}
                        placeholder="sidans-url"
                        className="bg-white/10 backdrop-blur-sm border border-white/30 text-white placeholder:text-white/60 focus:bg-white/20 focus:border-white/50 transition-all duration-200 rounded-lg sm:rounded-xl h-10 sm:h-12 text-sm sm:text-base"
                      />
                      <p className="text-xs text-white/70 mt-1">URL kommer att bli: /{pageForm.slug}</p>
                    </div>
                  </div>

                  <div>
                    <Label htmlFor="page-excerpt" className="text-white font-medium drop-shadow-sm text-sm sm:text-base">
                      Sammanfattning
                    </Label>
                    <Textarea
                      id="page-excerpt"
                      value={pageForm.excerpt}
                      onChange={(e) => setPageForm(prev => ({ ...prev, excerpt: e.target.value }))}
                      placeholder="Kort beskrivning av sidan..."
                      rows={3}
                      className="bg-white/10 backdrop-blur-sm border border-white/30 text-white placeholder:text-white/60 focus:bg-white/20 focus:border-white/50 transition-all duration-200 rounded-lg sm:rounded-xl text-sm sm:text-base resize-none"
                    />
                  </div>

                  <div>
                    <Label htmlFor="page-content" className="text-white font-medium drop-shadow-sm text-sm sm:text-base">
                      Innehåll
                    </Label>
                    <div className="border border-white/30 rounded-lg sm:rounded-xl bg-white/10 backdrop-blur-sm">
                      <textarea
                        id="page-content"
                        value={pageForm.content}
                        onChange={(e) => setPageForm(prev => ({ ...prev, content: e.target.value }))}
                        placeholder="Skriv sidans innehåll här..."
                        rows={12}
                        className="w-full p-4 font-mono text-sm border-none outline-none resize-none bg-transparent text-white placeholder:text-white/60"
                      />
                    </div>
                    <p className="text-xs text-white/70 mt-1">
                      TinyMCE WYSIWYG-editor kommer att integreras för rik textredigering med bilduppladdning
                    </p>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="page-meta-title" className="text-white font-medium drop-shadow-sm text-sm sm:text-base">
                        Meta-titel (SEO)
                      </Label>
                      <Input
                        id="page-meta-title"
                        value={pageForm.metaTitle}
                        onChange={(e) => setPageForm(prev => ({ ...prev, metaTitle: e.target.value }))}
                        placeholder="SEO-titel för sökmotorer"
                        className="bg-white/10 backdrop-blur-sm border border-white/30 text-white placeholder:text-white/60 focus:bg-white/20 focus:border-white/50 transition-all duration-200 rounded-lg sm:rounded-xl h-10 sm:h-12 text-sm sm:text-base"
                      />
                    </div>

                    <div>
                      <Label htmlFor="page-status" className="text-white font-medium drop-shadow-sm text-sm sm:text-base">
                        Status
                      </Label>
                      <Select
                        value={pageForm.status}
                        onValueChange={(value: 'draft' | 'published' | 'archived') =>
                          setPageForm(prev => ({ ...prev, status: value }))
                        }
                      >
                        <SelectTrigger className="bg-white/10 backdrop-blur-sm border border-white/30 text-white focus:bg-white/20 focus:border-white/50 transition-all duration-200 rounded-lg sm:rounded-xl h-10 sm:h-12 text-sm sm:text-base">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent className="bg-slate-900/95 backdrop-blur-md border border-white/20">
                          <SelectItem value="draft" className="text-white hover:bg-white/10">Utkast</SelectItem>
                          <SelectItem value="published" className="text-white hover:bg-white/10">Publicerad</SelectItem>
                          <SelectItem value="archived" className="text-white hover:bg-white/10">Arkiverad</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div>
                    <Label htmlFor="page-meta-description" className="text-white font-medium drop-shadow-sm text-sm sm:text-base">
                      Meta-beskrivning (SEO)
                    </Label>
                    <Textarea
                      id="page-meta-description"
                      value={pageForm.metaDescription}
                      onChange={(e) => setPageForm(prev => ({ ...prev, metaDescription: e.target.value }))}
                      placeholder="SEO-beskrivning för sökmotorer..."
                      rows={3}
                      className="bg-white/10 backdrop-blur-sm border border-white/30 text-white placeholder:text-white/60 focus:bg-white/20 focus:border-white/50 transition-all duration-200 rounded-lg sm:rounded-xl text-sm sm:text-base resize-none"
                    />
                  </div>
                </div>

                <div className="flex justify-end gap-3 pt-6">
                    <Button
                      variant="outline"
                      onClick={() => setShowPageDialog(false)}
                      className="bg-white/10 backdrop-blur-sm border border-white/30 text-white hover:bg-white/20 hover:border-white/50 transition-all duration-200 rounded-lg sm:rounded-xl px-6 py-2"
                    >
                      Avbryt
                    </Button>
                    <Button
                      onClick={handleSavePage}
                      className="bg-red-600 hover:bg-red-700 text-white border-0 transition-all duration-200 rounded-lg sm:rounded-xl px-6 py-2 flex items-center gap-2"
                    >
                      <Save className="w-4 h-4" />
                      {editingPage ? 'Uppdatera' : 'Skapa'}
                    </Button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Menu Item Editor Dialog */}
      <Dialog open={showMenuDialog} onOpenChange={setShowMenuDialog}>
        <DialogContent className="w-[95vw] max-w-[95vw] sm:w-[90vw] sm:max-w-[600px] md:max-w-[700px] lg:max-w-[800px] max-h-[95vh] sm:max-h-[90vh] p-0 overflow-hidden border-0 bg-transparent shadow-none">
          {/* Glassmorphism Container */}
          <div className="relative bg-white/10 backdrop-blur-xl border border-white/20 rounded-xl sm:rounded-2xl shadow-2xl h-full max-h-[95vh] overflow-hidden">
            {/* Background gradient overlay */}
            <div className="absolute inset-0 bg-gradient-to-br from-red-500/20 via-transparent to-blue-500/20 rounded-xl sm:rounded-2xl"></div>

            {/* Scrollable Content Container */}
            <div className="relative z-10 h-full overflow-y-auto">
              <div className="p-4 sm:p-6 md:p-8">
                <DialogHeader className="relative mb-4 sm:mb-6">
                  <div className="flex items-center justify-between">
                    <DialogTitle className="text-xl sm:text-2xl md:text-3xl font-bold text-white drop-shadow-lg pr-2">
                      {editingMenuItem ? 'Redigera menyobjekt' : 'Skapa nytt menyobjekt'}
                    </DialogTitle>
                  </div>
                  <div className="h-px bg-gradient-to-r from-transparent via-white/30 to-transparent mt-3 sm:mt-4"></div>
                </DialogHeader>

                <div className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="menu-label" className="text-white font-medium drop-shadow-sm text-sm sm:text-base">
                        Etikett *
                      </Label>
                      <Input
                        id="menu-label"
                        value={menuForm.label}
                        onChange={(e) => setMenuForm(prev => ({ ...prev, label: e.target.value }))}
                        placeholder="Menyobjektets namn"
                        className="bg-white/10 backdrop-blur-sm border border-white/30 text-white placeholder:text-white/60 focus:bg-white/20 focus:border-white/50 transition-all duration-200 rounded-lg sm:rounded-xl h-10 sm:h-12 text-sm sm:text-base"
                      />
                    </div>

                    <div>
                      <Label htmlFor="menu-url" className="text-white font-medium drop-shadow-sm text-sm sm:text-base">
                        URL
                      </Label>
                      <Input
                        id="menu-url"
                        value={menuForm.url}
                        onChange={(e) => setMenuForm(prev => ({ ...prev, url: e.target.value }))}
                        placeholder="Relativ URL eller fullständig URL"
                        className="bg-white/10 backdrop-blur-sm border border-white/30 text-white placeholder:text-white/60 focus:bg-white/20 focus:border-white/50 transition-all duration-200 rounded-lg sm:rounded-xl h-10 sm:h-12 text-sm sm:text-base"
                      />
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="menu-page" className="text-white font-medium drop-shadow-sm text-sm sm:text-base">
                        Länka till sida
                      </Label>
                      <Select
                        value={menuForm.pageId || "none"}
                        onValueChange={(value) => setMenuForm(prev => ({
                          ...prev,
                          pageId: value === "none" ? "" : value,
                          url: value === "none" ? prev.url : "" // Clear URL if page is selected
                        }))}
                      >
                        <SelectTrigger className="bg-white/10 backdrop-blur-sm border border-white/30 text-white focus:bg-white/20 focus:border-white/50 transition-all duration-200 rounded-lg sm:rounded-xl h-10 sm:h-12 text-sm sm:text-base">
                          <SelectValue placeholder="Välj en sida (valfritt)" />
                        </SelectTrigger>
                        <SelectContent className="bg-slate-900/95 backdrop-blur-md border border-white/20">
                          <SelectItem value="none" className="text-white hover:bg-white/10">Ingen specifik sida</SelectItem>
                          {pages.map((page) => (
                            <SelectItem key={page.id} value={page.id} className="text-white hover:bg-white/10">
                              {page.title} (/{page.slug})
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>

                    <div>
                      <Label htmlFor="menu-sort-order" className="text-white font-medium drop-shadow-sm text-sm sm:text-base">
                        Sorteringsordning
                      </Label>
                      <Input
                        id="menu-sort-order"
                        type="number"
                        value={menuForm.sortOrder}
                        onChange={(e) => setMenuForm(prev => ({ ...prev, sortOrder: parseInt(e.target.value) || 0 }))}
                        placeholder="0"
                        className="bg-white/10 backdrop-blur-sm border border-white/30 text-white placeholder:text-white/60 focus:bg-white/20 focus:border-white/50 transition-all duration-200 rounded-lg sm:rounded-xl h-10 sm:h-12 text-sm sm:text-base"
                      />
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="menu-icon" className="text-white font-medium drop-shadow-sm text-sm sm:text-base">
                        Ikon
                      </Label>
                      <Input
                        id="menu-icon"
                        value={menuForm.icon}
                        onChange={(e) => setMenuForm(prev => ({ ...prev, icon: e.target.value }))}
                        placeholder="Lucide ikonnamn (t.ex. Home)"
                        className="bg-white/10 backdrop-blur-sm border border-white/30 text-white placeholder:text-white/60 focus:bg-white/20 focus:border-white/50 transition-all duration-200 rounded-lg sm:rounded-xl h-10 sm:h-12 text-sm sm:text-base"
                      />
                    </div>

                    <div className="flex items-center space-x-4 pt-8">
                      <label className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          checked={menuForm.isExternal}
                          onChange={(e) => setMenuForm(prev => ({ ...prev, isExternal: e.target.checked }))}
                          className="rounded border-white/30 bg-white/10 text-red-600 focus:ring-red-500"
                        />
                        <span className="text-white text-sm">Extern länk</span>
                      </label>

                      <label className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          checked={menuForm.isActive}
                          onChange={(e) => setMenuForm(prev => ({ ...prev, isActive: e.target.checked }))}
                          className="rounded border-white/30 bg-white/10 text-red-600 focus:ring-red-500"
                        />
                        <span className="text-white text-sm">Aktiv</span>
                      </label>
                    </div>
                  </div>
          </div>

                  <div className="flex justify-end gap-3 pt-6">
                    <Button
                      variant="outline"
                      onClick={() => setShowMenuDialog(false)}
                      className="bg-white/10 backdrop-blur-sm border border-white/30 text-white hover:bg-white/20 hover:border-white/50 transition-all duration-200 rounded-lg sm:rounded-xl px-6 py-2"
                    >
                      Avbryt
                    </Button>
                    <Button
                      onClick={handleSaveMenuItem}
                      className="bg-red-600 hover:bg-red-700 text-white border-0 transition-all duration-200 rounded-lg sm:rounded-xl px-6 py-2 flex items-center gap-2"
                    >
                      <Save className="w-4 h-4" />
                      {editingMenuItem ? 'Uppdatera' : 'Skapa'}
                    </Button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}
